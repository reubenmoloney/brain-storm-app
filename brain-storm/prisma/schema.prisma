datasource db {
  provider     = "mysql"
  url          = "mysql://s1dicj42am74zwmrviqx:pscale_pw_D4YBeG2nvoGUItribafm0wdnmXZPQziR95BAffVtkSR@aws.connect.psdb.cloud/brainstorm?sslaccept=strict"
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

//profile table
model Profile {
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String@db.Text
  email String @db.Text

  groups Group[]
  members Member[]
  topics Topic[]
}

//group table -- profileId links to the creator of the group
model Group {
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  isPublic Boolean @default(false)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members Member[]
  topics Topic[]

  @@index([profileId])
}

//possible roles within groups
enum MemberRole {
  OWNER
  MODERATOR
  MEMBER
}

//Member table -- links to a profile and a group
model Member {
  id String @id @default(uuid())
  role MemberRole @default(MEMBER)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  groupId String
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  messages Message[]
  subMessages SubMessage[]

  @@index([profileId])
  @@index([groupId])
}

//Topics table -- links to group its in and the profile that created it
model Topic {
  id String @id @default(uuid())
  name String

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  groupId String
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  messages Message[]

  @@index([profileId])
  @@index([groupId])
}

model Message {
  id String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  topicId String
  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  isMedia Boolean @default(false)

  createdAt DateTime @default(now())

  subMessages SubMessage[]

  @@index([memberId])
  @@index([topicId])
}

//will have to add sub message table aswell, relation will be 1 message has many sub messages - they all have to be message not media
model SubMessage {
  id String @id @default(uuid())
  content String @db.Text

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  messageId String
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([memberId])
  @@index([messageId])
}
